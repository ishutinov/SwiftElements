//: [Назад](@previous)

import Foundation

//: ## Числа (Целочисленный тип)

//: Int: число в указанных диапазонах.
let minInt: Int = Int.min
let maxInt: Int = Int.max

//: UInt: принимает только положительные значения.
let minUInt: UInt = UInt.min
let maxUInt: UInt = UInt.max

//: Ниже приведены диапазоны чисел в разных разрядностях:
let minUInt8: UInt8   = UInt8.min
let maxUInt8: UInt8   = UInt8.max
let minUInt32: UInt32 = UInt32.min
let maxUInt32: UInt32 = UInt32.max
let minUInt64: UInt64 = UInt64.min
let maxUInt64: UInt64 = UInt64.max

/*:
 > Стоит заметить, что на компьютере с процессором 64-битной разрядности вы можете работать с любыми доступными диапазонами чисел.
 В то время как, к примеру, на 32-битном процессоре вы не сможете обрабатывать числа 64-битной разрядности.
*/
//: ### Примеры:

/// Показатель уворота монстра
var monsterFlee: Int
monsterFlee = 90
monsterFlee + 54
monsterFlee - 27
monsterFlee * 2
monsterFlee / 3
monsterFlee % 4 // Остаток от деления на указанное число

var anotherOne: UInt
//: `anotherOne = -21` - выдаст ошибку
/// Уровень атаки монстра в дапазоне от 12 до 16
var monsterAtk: Int = Int(arc4random_uniform(5) + 12)
var range = 12...15
/*:
 Вы, должно быть, успели задаться вопросом: *"Что за обозначение идёт после двоеточия после каждой переменной?"*
 Язык программирования Swift является языком Строгой типизации.
*/
/*:
 Строгая типизация выделяется тем, что язык не позволяет смешивать в выражениях различные типы
 и не выполняет автоматические неявные преобразования, например нельзя вычесть из строки множество.
*/
/*:
 Сделано это всё для того, чтобы избежать огромного количества ошибок всплывающих то тут, то там.
 Компилятор будет строго следить за качеством кода, увеличивая тем самым время разработки, но существенно сокращая процесс поиска
 и исправления всевозможных ошибок, как это бывает с языками со слабой типизацией, наподобие JavaScript
*/
//: ### Домашнее задание
//: Попрактикуйтесь с созданием численных переменных.

//: [Вперёд](@next)
